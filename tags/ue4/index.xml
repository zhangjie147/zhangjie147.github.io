<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UE4 on 张杰的博客</title>
    <link>https://zhangjie147.github.io/tags/ue4/</link>
    <description>Recent content in UE4 on 张杰的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Sep 2021 19:55:51 +0800</lastBuildDate><atom:link href="https://zhangjie147.github.io/tags/ue4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UE4_单向板</title>
      <link>https://zhangjie147.github.io/posts/ue4_%E5%8D%95%E5%90%91%E6%9D%BF/</link>
      <pubDate>Thu, 23 Sep 2021 19:55:51 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_%E5%8D%95%E5%90%91%E6%9D%BF/</guid>
      <description>单向板可以修改单向板碰转响应或者要通过的对象的碰转响应
 修改单向板的话如果对个对象一起通过单向板会出现错误 修改通过对象，因为对象有体积则需要对相近的多层单向板做出判断  下面修改通过对象例子 先创建一个单向板的对象通道
将上层碰撞体的对象类型修改为自己创建的响应设置为阻挡
在创建一个碰撞体的作为从下方碰撞的检测
在玩家创建函数来修改自身与单向板碰撞响应方式 建立一个变量可以用于检测多层的单向板
在下层碰撞响应调用函数</description>
    </item>
    
    <item>
      <title>UE4_范围伤害</title>
      <link>https://zhangjie147.github.io/posts/ue4_%E8%8C%83%E5%9B%B4%E4%BC%A4%E5%AE%B3/</link>
      <pubDate>Thu, 23 Sep 2021 12:15:41 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_%E8%8C%83%E5%9B%B4%E4%BC%A4%E5%AE%B3/</guid>
      <description>想要范围伤害被墙阻挡可以新建通道 Damage Prevention Channel
这样就可以实现 1和2 有伤害 3 没有伤害</description>
    </item>
    
    <item>
      <title>UE4_正常表达式</title>
      <link>https://zhangjie147.github.io/posts/ue4_%E6%AD%A3%E5%B8%B8%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 17 Sep 2021 21:11:17 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_%E6%AD%A3%E5%B8%B8%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Regex 实现 Return True：输入非法，不是设置的正则表达是值
Return False：设置正常值
正则表达式输入数字和字母：[^a-zA-Z0-9]
bool UFunctionLib::Regex(const FString str, const FString Reg) { FRegexPattern Pattern(Reg); FRegexMatcher regMatcher(Pattern, str); regMatcher.SetLimits(0, str.Len()); return regMatcher.FindNext(); } </description>
    </item>
    
    <item>
      <title>UE4_UCLASS()</title>
      <link>https://zhangjie147.github.io/posts/ue4_uclass/</link>
      <pubDate>Mon, 13 Sep 2021 17:10:58 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_uclass/</guid>
      <description>类说明符 在声明类时，声明上可添加修饰符以控制引擎和编辑器的不同方面的类表现
 Abstract  抽象类说明符将类声明为 “抽象基类”, 防止用户在虚幻编辑器中向世界添加此类的参与者, 或在游戏中创建此类的实例。这对于那些本身没有意义的类很有用。例如, ATriggerBase 基类是抽象的, 而 ATriggerBox 子类别不是抽象的, 您可以在世界上放置一个 ATriggerBox 类的实例, 并且它是有用的, 而 ATriggerBase 的实例本身并不有用
  AdvancedClassDisplay AdvancedClassDisplay 类说明符强制类的所有属性只显示在 “详细信息” 面板的 “高级” 部分中, 默认情况下隐藏在 “视图” 中。若要在单个属性上重写此项, 请在该属性上使用 SimpleDisplay 说明符
  AutoCollapseCategories=(Category1, Category2, …) / DontAutoCollapseCategories=(Category, Category, …) AutoCollapseCategories类说明符取消对父类AutoExpandCategories说明符的列出类别的影响
DontAutoCollapseCategories否定从父类继承的列出类别的AutoCollapseCategories说明符
  AutoExpandCategories=(Category1, Category2, …) 指定应在该类的对象的 “虚幻编辑器” 属性窗口中自动展开的一个或多个类别。若要自动声明为无类别的变量, 请使用声明变量的类的名称
  Blueprintable / NotBlueprintable 将此类公开为创建蓝图的可接受基类。默认是NotBlueprintable，除非继承，否则该说明符由子类继承
  BlueprintType 将此类公开为可用于蓝图中的变量的类型
  ClassGroup=GroupName 表示在Actor浏览器中启用Group View后，虚幻编辑器的Actor浏览器应该在指定的GroupName中包含此类以及此类的任何子类</description>
    </item>
    
    <item>
      <title>UE4_蓝图与C&#43;&#43;相互通信</title>
      <link>https://zhangjie147.github.io/posts/%E9%80%9A%E8%BF%87%E7%BB%A7%E6%89%BFublueprintfunctionlibrary%E7%9A%84%E7%B1%BB%E5%AE%9E%E7%8E%B0%E8%93%9D%E5%9B%BE%E4%B8%8Ec&#43;&#43;%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 13 Sep 2021 17:06:42 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/%E9%80%9A%E8%BF%87%E7%BB%A7%E6%89%BFublueprintfunctionlibrary%E7%9A%84%E7%B1%BB%E5%AE%9E%E7%8E%B0%E8%93%9D%E5%9B%BE%E4%B8%8Ec&#43;&#43;%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/</guid>
      <description>该方法实现的是蓝图调用c++类
UMyBPFunctionLibrary中的方法为静态方法
UMyBPFunctionLibrary.h
UCLASS() class UMyBPFunctionLibrary : public UBlueprintFunctionLibrary { GENERATED_UCLASS_BODY() public: UFUNCTION(BlueprintCallable, Category = &amp;#34;MyFunction|MyClass&amp;#34;) static void Method1(); UFUNCTION(BlueprintCallable, Category = &amp;#34;MyFunction|MyClass&amp;#34;) static void Method2(); UFUNCTION(BlueprintCallable, Category = &amp;#34;MyFunction|MyClass&amp;#34;) static void Method3(); }; UMyBPFunctionLibrary.cpp
UMyBPFunctionLibrary::UMyBPFunctionLibrary(const FObjectInitializer&amp;amp; ObjectInitializer) : Super(ObjectInitializer) { } void UMyBPFunctionLibrary::Method1() { } void UMyBPFunctionLibrary::Method2() { } void UMyBPFunctionLibrary::Method3() { } 这样蓝图中就可以调用c++中方法method1、method2、method3，方便蓝图与c++交互。</description>
    </item>
    
    <item>
      <title>UE4_C&#43;&#43;_事件委托（代理）</title>
      <link>https://zhangjie147.github.io/posts/ue4_c&#43;&#43;_%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E4%BB%A3%E7%90%86/</link>
      <pubDate>Fri, 10 Sep 2021 17:16:12 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_c&#43;&#43;_%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E4%BB%A3%E7%90%86/</guid>
      <description>委托本身是一种特殊对象 委托可绑定任意对象的函数 委托是一种观察者模式，当委托执行时，通知所有绑定到这个委托的对象 定义委托类的宏可以在DelegateCombinations.h查看，这里只暂时只展示了无参数的宏。这些宏用于声明和定义一个委托类  #define DECLARE_DELEGATE( DelegateName ) FUNC_DECLARE_DELEGATE( DelegateName, void )  #define DECLARE_MULTICAST_DELEGATE( DelegateName ) FUNC_DECLARE_MULTICAST_DELEGATE( DelegateName, void )  #define DECLARE_EVENT( OwningType, EventName ) FUNC_DECLARE_EVENT( OwningType, EventName, void )  #define DECLARE_DYNAMIC_DELEGATE( DelegateName ) BODY_MACRO_COMBINE(CURRENT_FILE_ID,_,__LINE__,_DELEGATE) FUNC_DECLARE_DYNAMIC_DELEGATE( FWeakObjectPtr, DelegateName, DelegateName##_DelegateWrapper, , FUNC_CONCAT( *this ), void )  #define DECLARE_DYNAMIC_MULTICAST_DELEGATE( DelegateName ) BODY_MACRO_COMBINE(CURRENT_FILE_ID,_,__LINE__,_DELEGATE) FUNC_DECLARE_DYNAMIC_MULTICAST_DELEGATE( FWeakObjectPtr, DelegateName, DelegateName##_DelegateWrapper, , FUNC_CONCAT( *this ), void )  #define DECLARE_DELEGATE_RetVal( ReturnValueType, DelegateName ) FUNC_DECLARE_DELEGATE( DelegateName, ReturnValueType )  #define DECLARE_DYNAMIC_DELEGATE_RetVal( ReturnValueType, DelegateName ) BODY_MACRO_COMBINE(CURRENT_FILE_ID,_,__LINE__,_DELEGATE) FUNC_DECLARE_DYNAMIC_DELEGATE_RETVAL( FWeakObjectPtr, DelegateName, DelegateName##_DelegateWrapper, ReturnValueType, , FUNC_CONCAT( *this ), ReturnValueType ) 从上往下一次是：</description>
    </item>
    
    <item>
      <title>UE4_函数与事件的区别</title>
      <link>https://zhangjie147.github.io/posts/ue4_%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 10 Sep 2021 15:44:06 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>一、函数有返回值，事件无返回值
二、函数调用会等待函数执行结果，事件调用只是触发但不会等待。
三、函数执行在同一个线程，事件执行在不同线程。
四、函数可以用局部变量，事件没有局部变量。
五、因为函数执行顺序有保证，所以优先使用函数
六、没有返回值的函数，在被子类Overide时，会变成事件</description>
    </item>
    
    <item>
      <title>UE4_加载资源</title>
      <link>https://zhangjie147.github.io/posts/ue4_%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90/</link>
      <pubDate>Fri, 03 Sep 2021 17:10:22 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90/</guid>
      <description>资源的硬引用 只能在类的构造函数中使用
#include &amp;#34;UObject/ConstructorHelpers.h&amp;#34; \\需要include的头文件FObjectFinder&amp;lt;T&amp;gt;() static ConstructorHelpers::FObjectFinder&amp;lt;\Class&amp;gt; ObjectFinder(TEXT(&amp;#34;path... &amp;#34;)); Class* name = ObjectFinder.Object; FClassFinder&amp;lt;T&amp;gt;() static ConstructorHelpers::FClassFinder&amp;lt;\Class&amp;gt; BPClassFinder(TEXT(&amp;#34;path... &amp;#34;)); TSubclassOf&amp;lt;Class&amp;gt; name = BPClassFinder.Class; ...//利用Class生成蓝图对象 资源的软引用 软性引用，即对象 A 通过间接机制（例如字符串形式的对象路径）来引用对象 B。
硬引用的问题是在容易一开始就加载全部硬引用表示的资源，这可能导致资源载入时间过长。而软引用则是可随时灵活加载资源的一种引用，而不用硬性地一开始就加载。
FSoftObjectPaths、FStringAssetReference FSoftObjectPath：是一个简单的结构体，其中包含了资源的完整名称（一个字符串）。它实质就是用一个字符串来表示对应的资源，从而可以随时通过字符串找到硬盘上的目标资源，将其载入进内存。
FStringAssetReference：其实只是一个听起来更容易理解的别名，它实际在UE4源码里是这样的：
typedef FSoftObjectPath FStringAssetReference; TSoftObjectPtr&amp;lt;T&amp;gt; TSoftObjectPtr是包含了FSoftObjectPath的TWeakObjectPtr，可通过模板参数来设置特定资源类型，这样就可以限制编辑器UI仅允许选择特定的资源种类。
同步加载资源 LoadObject&amp;lt;T&amp;gt;() 加载UObject，一般用来加载非蓝图资源。
Class* name = LoadObject&amp;lt;\Class&amp;gt;(nullptr,TEXT(&amp;#34;path..&amp;#34;)); LoadClass&amp;lt;T&amp;gt;() 加载UClass，一般用来加载蓝图资源并获取蓝图Class。实际上源码里LoadClass的实现是调用LoadObject并获取类型。 LoadClass的模版名称，和上面FClassFinder一样，不能直接写UBlueprint。 LoadClass路径规范也和上面的FClassFinder一样，带_C后缀或去掉前缀
TSubclassOf&amp;lt;\Class&amp;gt; name = LoadClass&amp;lt;\Class&amp;gt;(nullptr, TEXT(&amp;#34;path.._C&amp;#34;)); TryLoad/LoadSynchronous TryLoad()//FSoftObjectPaths的方法，直接根据路径加载资源。  LoadSynchronous()//TSoftObjectPtr&amp;lt;\T&amp;gt;的方法，也是直接根据路径加载资源。 由于软引用里包含资源完整路径名，因此无需再写一次路径名，而是调用如上成员方法来加载资源进内存。而软引用的作用不仅如此，它还可以用于下面要介绍的资源异步加载方式。
异步加载资源 即使可以控制加载资源的时机，但如果加载的资源对象很大（或者同一时刻加载多个资源），还是会造成卡顿，为了避免阻塞主线程，异步加载的方式必不可少。
FStreamableManager.RequestAsyncLoad() 首先，需要创建FStreamableManager，官方建议将它放在某类全局游戏单例对象中，例如使用GameSingletonClassName在DefaultEngine.ini中指定的对象。
FStreamableManager.RequestAsyncLoad()：将异步加载一组资源并在完成后调用委托 void UGameCheatManager::GrantItems() { //获取 FStreamableManager的单例对象引用  FStreamableManager&amp;amp; Streamable = .</description>
    </item>
    
    <item>
      <title>UE4_资源加载的几种方式</title>
      <link>https://zhangjie147.github.io/posts/ue4_%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 28 Aug 2021 17:10:22 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4_%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>资源加载的几种方式 1构造时引用 此种方式是在类的构造方法中使用，使用ConstructHelpers::FObjectFinder()方法可以实现在引用指定的资源文件，贴图，特效，材质等等都可以使用。有一点需要注意的就是这种方式一定只能在构造方法中使用，如果试图自己创建一个方法并且在这个方法中使用ConstructHelpers::FObjectFinder的方式去引用资源，游戏则会崩溃 UStaticMeshComponent* mesh; mesh = CreateDefaultSubobject(TEXT(&amp;#34;Mesh&amp;#34;)); // &amp;#34;/Game/Maze/Map/Mash/2wall_2&amp;#34; 可在UE4中右键资源复制引用  ConstructorHelpers::FObjectFinder&amp;lt;UStaticMesh&amp;gt; meshAsset(TEXT(&amp;#34;mesh asset path&amp;#34;)) mesh -&amp;gt;SetStaticMesh(meshAsset.Object); 2运行时引用 可以实现在运行中引用指定路径的资源。此时它就不是使用ConstructHelpers这个类去实现了，需要用到StaticLoadObject，以下是示例代码 UStaticMesh* AMyActor::GetStaticMeshByName(const FString&amp;amp; AssetName){ //&amp;#34;StaticMesh&amp;#39;/Engine/BasicShapes/Cube.Cube&amp;#39;&amp;#34;  FString Paths = &amp;#34;StaticMesh&amp;#39;/Game/TestFolder/Product1/Geometries/&amp;#34;; Paths.Append(AssetName).Append(&amp;#34;.&amp;#34;).Append(AssetName).Append(&amp;#34;&amp;#39;&amp;#34;); UStaticMesh* ReturnMesh = Cast&amp;lt;UStaticMesh&amp;gt;(StaticLoadObject(UStaticMesh::StaticClass(), NULL, *Paths)); return ReturnMesh; } 3直接属性引用 通过在头文件中定义变量指针，并将其设置为UPROPERTY(EditDefaultsOnly),之后在蓝图中将此变量赋予资源，最后就可以直接引用该变量设置资源了。不过这种方式似乎是不能动态控制，就是说点击Play按钮就全部会默认都加载 /** construction start sound stinger */ UPROPERTY(EditDefaultsOnly, Category=Mesh) UStaticMesh* MeshData; 4间接属性引用 间接属性引用跟第3种方法有点像同样用到了UPROPERTY(EditDefaulsOnly)，但是不同的是它声明变量是需要使用TSoftObjectPtr。例如TSoftObjectPtr&amp;lt;UStaticMesh&amp;gt; MeshData。这个形式表示该变量以字符串形式与模板代码存储在一起一边安全地检查资源是否已经加载，而不是可以在蓝图中设置完资源后就直接使用了。这种方式是可以控制什么时候加载该资源，并且加载需要手动写代码加载，加载之前将对该资源进行检查看是否加载。如果没有加载，会使用FStreamingManager 执行同步加载，如果已经加载，则会直接返回TSoftObjectPtr中的UStaticMesh指针 void ASoftActor::DynamicUpdateStaticMesh() { FStreamableManager&amp;amp; StreamableManager = UAssetManager::Get().GetStreamableManager(); if (MeshData.IsPending()) { const FSoftObjectPath&amp;amp; AssetRef = MeshData.</description>
    </item>
    
    <item>
      <title>UE4-多人联机 各类运行位子</title>
      <link>https://zhangjie147.github.io/posts/ue4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Tue, 19 Nov 2019 14:25:12 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C/</guid>
      <description>只在服务器上运行  GameMode AI PlayerController  </description>
    </item>
    
    <item>
      <title>UE4-多人联机-Replicate</title>
      <link>https://zhangjie147.github.io/posts/ue4-%E5%A4%9A%E4%BA%BA%E8%81%94%E6%9C%BA-replicate/</link>
      <pubDate>Mon, 04 Nov 2019 17:25:12 +0800</pubDate>
      
      <guid>https://zhangjie147.github.io/posts/ue4-%E5%A4%9A%E4%BA%BA%E8%81%94%E6%9C%BA-replicate/</guid>
      <description>UE4 C++ Replicate 方法 Replicate Property 在多人网络环境下，Actor也是网络传输的核心元素，甚至可以说Actor是网络同步中的最小单位
 我们需要将Actor::bReplicates变量设置为true。 只想让Actor的所有者得到信息，我们可以设置Actor::bAlwaysRelevant变量为true。 只想让距离Actor的一定范围的人得到同步，我们可以设置Actor::NetCullDistanceSquared。 特定条件，我们可以Override在Actor::IsNetRelevantFor函数。  方法一 将变量声明 Replicated
UPROPERTY(Replicated) float a; 方法二 将变量声明 Replicated
UPROPERTY(ReplicatedUsing=OnRep_A) float a; UFUNCTION() void OnRep_A(...); void OnRep_A(...) { ... } C++声明此种同步属性，当属性在服务器发生变化时，对应的客户端自动调用OnRep函数，在服务器端，需要手动调用OnRep函数
以上都需要加入方法GetLifetimeReplicatedProps #include &amp;lt;Net/UnrealNetwork.h&amp;gt; void A::GetLifetimeReplicatedProps(TArray&amp;lt; FLifetimeProperty &amp;gt; &amp;amp; OutLifetimeProps) const { Super::GetLifetimeReplicatedProps(OutLifetimeProps); DOREPLIFETIME(A, a); } 可以用来使用条件复制（Conditional Replication）就可以实现属性只同步给部分客户端的功能
 Function Call Replicate 一共有三种RPCs，分别为Server函数，Client函数，Multicast函数
 Client 服务器上调用、但需要在客户端上执行的 RPC Server 客户端上调用、但需要在服务器上执行的 RPC Multicast 多播 RPC 可以从服务器调用，然后在服务器和当前连接的所有客户端上执行  UFUNCTION( Client ); Fa() UFUNCTION( Serve ); Fb() UFUNCTION( Multicast ); Fc() 定义我们的RPC函数。此时需要注意的是，RPC函数的定义需要在函数末尾添加_Impementation UFUNCTION( Serve ); Fa() void A::Fa_Implementation() { Fa(); } void A::Fa() { if (Role &amp;lt; ROLE_Authority) { ServerFa(); } } 枚举类型 UENUM() enum ENetRole { /** No role at all.</description>
    </item>
    
  </channel>
</rss>
